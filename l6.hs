myZip :: [a] -> [b] -> [(a, b)]
myZip [] _ = []
myZip _ [] = []
myZip (x : xs) (y : ys) = (x, y) : myZip xs ys

myZipWith :: (a -> b -> c) -> [a] -> [b] -> [c]
myZipWith f [] _ = []
myZipWith f _ [] = []
myZipWith f (x : xs) (y : ys) = f x y : myZipWith f xs ys

prefixes :: [a] -> [[a]]
prefixes [] = [[]]
prefixes (x : xs) = [] : map ( x : ) (prefixes xs)
-- >>> prefixes [2, 3]
-- [[],[2],[2,3]]
--

suffixes :: [a] -> [[a]]
suffixes [] = [[]]
suffixes (x : xs) = (x : xs) : suffixes xs
-- >>> suffixes [2, 3]
-- [[2,3],[3],[]]
--

interleave :: a -> [a] -> [[a]]
interleave x [] = [[x]]
interleave x (y : ys) = (x : y : ys) : [y : zs | zs <- interleave x ys]
-- >>> interleave 1 [2, 3]
-- [[1,2,3],[2,1,3],[2,3,1]]
--

permutations :: [a] -> [[a]]
permutations [] = [[]]
permutations (x : xs) = [ ys | ps <- permutations xs, ys <- interleave x ps ]
-- >>> permutations [2, 3]
-- [[2,3],[3,2]]
-- >>> permutations [1, 2, 3]
-- [[1,2,3],[2,1,3],[2,3,1],[1,3,2],[3,1,2],[3,2,1]]
--

-- n-queens problem
-- safe i j i' j' returns True if
    -- queens at (i, j) and (i', j') have no conflict,
    -- or they are identical
safe :: Int -> Int -> Int -> Int -> Bool
safe i j i' j' = (i /= i'  &&  j /= j'  &&  abs (i - i') /= abs (j - j'))
-- ok [x_0 , ..., x_{n-1}] returns True if
    -- safe i x_i j x_j holds for all i, j <- {0, ..., n-1}
ok :: [Int] -> Bool
ok [] = True
ok ( x : xs ) = and [ safe i xi j xj | (i, xi) <- zip [0..] xs, (j, xj) <- zip [0..] xs, i < j]
-- andはリストの全要素がTrueならTrue
-- [0..]は0から始まる無限リスト
-- complete n-queens problem solver
nqueen n = [xs | xs <- permutations [0..n-1], ok xs]
-- >>> nqueen 4
-- [[1,2,0,3],[2,1,3,0],[2,0,3,1],[1,3,0,2]]
-- >>> nqueen 8
-- [[2,4,1,5,0,6,3,7],[4,2,5,1,6,0,3,7],[0,4,1,5,2,6,3,7],[4,5,2,6,1,3,7,0],[4,5,2,6,3,0,7,1],[4,1,5,0,6,3,7,2],[3,5,1,4,6,0,2,7],[5,4,0,3,6,2,7,1],[2,5,1,4,6,0,3,7],[5,2,4,6,0,3,1,7],[5,4,6,1,3,7,0,2],[5,4,6,0,3,1,7,2],[5,4,6,0,2,7,1,3],[3,2,5,1,6,4,0,7],[3,5,2,0,6,4,7,1],[3,5,1,6,0,2,4,7],[2,5,3,0,6,4,1,7],[1,5,3,6,0,2,4,7],[5,3,6,0,2,4,1,7],[1,5,3,0,6,4,2,7],[0,5,3,1,6,4,2,7],[5,6,3,1,4,7,0,2],[2,5,1,6,4,0,7,3],[2,5,0,6,4,7,1,3],[5,2,0,6,4,7,1,3],[5,1,6,0,2,4,7,3],[1,5,0,6,4,2,7,3],[0,5,1,6,4,2,7,3],[3,5,2,6,1,7,4,0],[2,5,3,6,0,7,1,4],[2,5,3,6,0,7,4,1],[5,3,1,6,2,0,7,4],[5,0,3,6,2,7,1,4],[5,3,6,2,7,1,4,0],[5,3,6,0,7,1,4,2],[2,5,1,6,0,3,7,4],[0,1,5,2,6,3,7,4],[1,5,2,6,3,0,7,4],[5,2,6,1,3,7,0,4],[5,2,6,3,1,7,4,0],[5,2,6,3,0,7,1,4],[0,5,2,6,3,7,4,1],[1,5,0,6,3,7,2,4],[5,1,6,0,3,7,4,2],[5,6,1,3,0,7,4,2],[5,0,6,3,1,7,4,2],[5,6,3,0,7,1,4,2],[5,2,6,1,7,4,0,3],[3,4,6,1,5,2,0,7],[4,3,1,6,2,5,7,0],[1,2,4,6,0,3,5,7],[0,2,4,6,1,3,5,7],[1,4,6,0,3,5,7,2],[0,4,6,1,3,5,7,2],[4,6,1,5,2,0,3,7],[2,4,6,1,5,7,0,3],[2,4,6,0,5,7,1,3],[4,1,6,2,5,7,0,3],[4,6,1,5,2,0,7,3],[1,3,6,4,2,0,5,7],[3,6,4,2,0,5,7,1],[3,6,4,1,5,0,2,7],[6,4,1,3,5,7,2,0],[6,4,0,5,3,1,7,2],[6,4,2,0,5,7,1,3],[2,3,6,0,5,1,4,7],[0,3,6,2,5,1,4,7],[6,3,5,0,2,4,7,1],[6,3,5,0,4,1,7,2],[2,6,0,5,1,4,7,3],[0,6,2,5,1,4,7,3],[6,2,5,1,4,7,0,3],[6,1,5,0,2,4,7,3],[6,5,0,2,4,7,1,3],[6,5,2,4,7,0,3,1],[0,3,1,6,2,5,7,4],[3,1,6,2,5,7,0,4],[3,1,6,2,5,7,4,0],[3,6,2,0,5,7,4,1],[3,6,1,5,2,0,7,4],[2,0,6,3,5,7,1,4],[1,6,0,3,5,7,2,4],[0,6,1,3,5,7,2,4],[0,6,3,5,7,1,4,2],[6,0,3,5,7,1,4,2],[6,2,5,3,0,7,4,1],[6,1,5,2,0,3,7,4],[6,5,2,0,3,7,4,1],[6,0,5,3,1,7,4,2],[6,5,3,1,7,4,2,0],[6,5,7,2,0,3,1,4],[6,5,7,1,3,0,2,4],[1,6,2,5,7,4,0,3],[6,2,0,5,7,4,1,3],[6,5,2,0,7,4,1,3],[3,4,2,0,6,1,7,5],[3,1,4,6,0,2,7,5],[0,4,1,3,6,2,7,5],[4,1,3,6,2,7,5,0],[2,1,4,6,3,0,7,5],[2,4,6,0,3,1,7,5],[4,2,6,3,1,7,5,0],[1,4,6,3,0,2,7,5],[4,6,3,0,2,7,5,1],[4,6,1,3,7,0,2,5],[1,4,6,3,0,7,5,2],[4,6,0,3,1,7,5,2],[4,6,3,1,7,5,0,2],[4,2,0,6,1,7,5,3],[4,2,6,1,7,5,3,0],[1,4,6,0,2,7,5,3],[4,1,6,0,2,7,5,3],[4,6,0,2,7,5,3,1],[2,3,1,6,4,0,7,5],[0,3,1,6,4,2,7,5],[1,3,6,4,7,5,0,2],[3,1,6,4,0,7,5,2],[6,3,1,4,7,0,2,5],[1,6,3,0,4,7,5,2],[0,6,3,1,4,7,5,2],[6,3,1,4,7,5,0,2],[6,4,2,0,3,1,7,5],[6,4,1,3,0,2,7,5],[2,1,6,4,7,0,3,5],[2,0,6,4,7,1,3,5],[6,0,2,4,7,1,3,5],[6,2,4,7,1,3,5,0],[6,1,4,7,3,0,2,5],[6,4,7,3,0,2,5,1],[1,6,4,7,0,3,5,2],[6,1,4,7,0,3,5,2],[0,6,4,7,1,3,5,2],[1,2,0,6,4,7,5,3],[6,2,4,1,7,5,3,0],[0,1,6,4,2,7,5,3],[0,6,4,2,7,5,3,1],[2,3,6,0,7,4,1,5],[3,6,2,7,1,4,0,5],[3,6,0,7,4,1,5,2],[0,2,6,3,7,4,1,5],[1,6,3,0,7,4,2,5],[6,1,3,0,7,4,2,5],[6,3,1,7,4,2,0,5],[6,3,7,4,2,0,5,1],[0,6,3,7,4,1,5,2],[6,3,0,7,4,1,5,2],[2,6,1,7,4,0,3,5],[6,2,7,1,4,0,5,3],[6,1,7,4,2,0,5,3],[3,6,1,7,5,0,2,4],[6,3,1,7,5,0,2,4],[6,2,7,1,3,5,0,4],[2,6,1,7,5,3,0,4],[1,6,2,7,5,3,0,4],[6,0,2,7,5,3,1,4],[3,4,2,0,5,7,1,6],[2,4,0,3,5,7,1,6],[1,4,0,3,5,7,2,6],[4,1,3,5,7,2,0,6],[4,3,5,7,2,0,6,1],[4,0,3,5,7,1,6,2],[4,3,5,7,1,6,0,2],[4,2,0,5,7,1,3,6],[4,2,5,7,1,3,0,6],[4,5,2,0,7,3,1,6],[4,1,5,7,2,0,3,6],[4,0,5,7,1,3,6,2],[4,0,5,7,2,6,3,1],[3,2,5,1,4,7,0,6],[3,5,0,4,1,7,2,6],[2,5,3,0,4,7,1,6],[5,3,0,4,7,1,6,2],[0,2,5,1,4,7,3,6],[1,5,2,4,7,0,3,6],[5,2,4,1,7,0,3,6],[5,2,4,7,1,3,6,0],[5,2,4,7,0,3,1,6],[5,2,4,7,3,0,6,1],[0,5,1,4,7,3,6,2],[5,4,1,7,0,3,6,2],[5,0,4,7,1,3,6,2],[5,4,0,7,3,1,6,2],[2,5,1,4,7,0,6,3],[5,2,4,1,7,0,6,3],[5,0,4,1,7,2,6,3],[5,4,1,7,2,6,3,0],[5,4,7,0,2,6,1,3],[3,2,5,7,0,4,6,1],[0,1,3,5,7,2,4,6],[0,3,5,7,2,4,6,1],[1,3,5,7,4,6,0,2],[1,2,5,3,0,7,4,6],[0,2,5,3,1,7,4,6],[2,5,3,1,7,4,6,0],[2,5,3,0,7,4,6,1],[5,3,7,4,2,0,6,1],[5,3,1,7,4,6,0,2],[1,2,5,7,4,0,3,6],[0,2,5,7,4,1,3,6],[5,2,0,7,4,1,3,6],[1,2,0,5,7,4,6,3],[2,5,7,0,4,6,1,3],[0,5,7,2,4,6,1,3],[5,7,1,4,2,0,6,3],[1,3,5,7,2,0,6,4],[3,5,7,2,0,6,4,1],[3,5,7,1,6,0,2,4],[5,3,1,7,2,0,6,4],[1,2,5,7,0,3,6,4],[2,5,7,1,3,0,6,4],[2,5,7,0,3,6,4,1],[5,2,7,1,3,0,6,4],[5,2,0,7,3,1,6,4],[1,5,7,2,0,3,6,4],[5,7,1,3,0,6,4,2],[5,1,7,2,6,3,0,4],[0,5,7,2,6,3,1,4],[3,4,7,0,2,5,1,6],[1,3,0,4,7,5,2,6],[3,1,4,7,5,0,2,6],[3,0,4,7,5,2,6,1],[3,4,0,7,5,2,6,1],[4,3,7,0,2,5,1,6],[4,3,0,7,5,2,6,1],[4,7,3,0,2,5,1,6],[0,2,4,1,7,5,3,6],[2,4,1,7,5,3,6,0],[1,4,2,7,5,3,0,6],[0,4,2,7,5,3,1,6],[0,4,7,5,2,6,1,3],[4,0,7,5,2,6,1,3],[2,3,7,4,1,5,0,6],[0,3,7,4,1,5,2,6],[7,3,0,4,1,5,2,6],[7,4,2,0,5,3,1,6],[7,4,0,5,3,1,6,2],[2,7,4,1,5,0,6,3],[0,7,4,1,5,2,6,3],[7,0,4,1,5,2,6,3],[7,4,1,5,2,6,3,0],[3,7,2,0,5,1,4,6],[3,1,7,5,0,2,4,6],[7,1,3,5,0,2,4,6],[7,3,5,0,2,4,6,1],[7,2,5,1,4,0,3,6],[7,5,1,4,0,3,6,2],[7,2,0,5,1,4,6,3],[1,7,5,0,2,4,6,3],[7,5,0,2,4,6,1,3],[7,5,2,4,6,0,3,1],[2,3,1,7,5,0,6,4],[2,3,0,7,5,1,6,4],[3,7,0,2,5,1,6,4],[7,3,0,2,5,1,6,4],[1,2,7,5,3,0,6,4],[0,2,7,5,3,1,6,4],[7,2,0,5,3,1,6,4],[7,5,2,0,3,6,4,1],[7,5,3,6,0,2,4,1],[1,7,5,3,0,6,4,2],[0,7,5,3,1,6,4,2],[7,0,5,3,1,6,4,2],[7,5,3,1,6,4,2,0],[7,1,5,2,6,3,0,4],[7,5,2,6,3,0,4,1],[3,0,4,7,1,6,2,5],[2,4,7,3,0,6,1,5],[1,4,2,7,3,6,0,5],[4,2,7,3,6,0,5,1],[0,1,4,7,3,6,2,5],[1,4,7,0,3,6,2,5],[4,1,7,0,3,6,2,5],[4,0,7,3,1,6,2,5],[0,4,7,3,6,2,5,1],[4,7,3,0,6,1,5,2],[2,1,4,7,0,6,3,5],[2,4,1,7,0,6,3,5],[2,3,1,7,4,6,0,5],[2,3,7,0,4,6,1,5],[1,3,7,2,4,6,0,5],[0,3,7,2,4,6,1,5],[3,7,4,2,0,6,1,5],[3,1,7,4,6,0,2,5],[3,7,0,4,6,1,5,2],[7,1,4,0,3,6,2,5],[7,4,0,3,6,2,5,1],[2,7,1,4,6,0,3,5],[1,7,2,4,6,0,3,5],[0,7,2,4,6,1,3,5],[7,0,2,4,6,1,3,5],[7,2,4,6,1,3,5,0],[1,7,4,2,0,6,3,5],[7,1,4,2,0,6,3,5],[7,1,4,6,3,0,2,5],[7,4,6,1,3,5,0,2],[7,4,6,1,5,2,0,3],[3,7,2,0,6,4,1,5],[2,7,3,0,6,4,1,5],[7,1,3,0,6,4,2,5],[7,3,1,6,4,2,0,5],[7,3,6,4,1,5,0,2],[7,2,6,3,0,4,1,5],[7,6,3,0,4,1,5,2],[7,1,6,4,2,0,5,3],[7,6,4,2,0,5,3,1],[2,7,3,6,0,5,1,4],[0,7,3,6,2,5,1,4],[7,0,3,6,2,5,1,4],[7,3,6,2,5,1,4,0],[7,2,6,1,3,5,0,4],[7,6,1,3,5,0,2,4],[7,6,2,5,1,4,0,3]]
--


-- concatはリストのリストを一つのリストにまとめる
-- concat [[1, 2], [3], [], [4, 5]] = [1, 2, 3, 4, 5]


-- [(x, y) | x <- [1, 2], y <- ["a", "b"]] = concat [[(x,y) | y <- ["a", "b"]] | x <- [1, 2]]


data Tree a = Leaf | Node (Tree a) a (Tree a)
    deriving Show

tree1 :: Tree Int
tree1 = Node (Node Leaf 1 Leaf) 2 (Node Leaf 3 Leaf)

-- member :: Eq a => a -> Tree a -> Bool
-- member x Leaf = False
-- member x (Node left y right) = (x == y) || member x left || member x right
-- >>> member 3 tree1
-- True
--

depth :: Tree a -> Int
depth Leaf = 0
depth (Node left _ right) = 1 + max (depth left) (depth right)
-- >>> depth tree1
-- 2
--
inorder :: Tree a -> [a]
inorder Leaf = []
inorder (Node left x right) = inorder left ++ [x] ++ inorder right
-- >>> inorder tree1
-- [1,2,3]
--

-- 「深さ d に関して O(d) の計算量で動作する membership 関数を実装せよ」
-- つまり「計算量が木の深さ d に比例する（O(d)）」という意味です

member :: Ord a => a -> Tree a -> Bool
member x Leaf = False
member x (Node left y right)
    | x == y    = True
    | x < y     = member x left
    | otherwise = member x right
-- >>> member 3 tree1
-- True
--

add :: Ord a => a -> Tree a -> Tree a
add x Leaf = Node Leaf x Leaf
add x (Node left y right)
    | x == y    = Node left y right
    | x < y     = Node (add x left) y right
    | otherwise = Node left y (add x right)
-- >>> add 4 tree1
-- Node (Node Leaf 1 Leaf) 2 (Node Leaf 3 (Node Leaf 4 Leaf))
-- >>> add 2 tree1
-- Node (Node Leaf 1 Leaf) 2 (Node Leaf 3 Leaf)
--

